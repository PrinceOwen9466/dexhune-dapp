/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumberish,
	BytesLike,
	FunctionFragment,
	Result,
	Interface,
	EventFragment,
	AddressLike,
	ContractRunner,
	ContractMethod,
	Listener,
} from "ethers";
import type {
	TypedContractEvent,
	TypedDeferredTopicFilter,
	TypedEventLog,
	TypedLogDescription,
	TypedListener,
	TypedContractMethod,
} from "./contract-common";

export interface DexhuneERC20Interface extends Interface {
	getFunction(
		nameOrSignature:
			| "allowance"
			| "approve"
			| "balanceOf"
			| "daoMintingStartsAfter"
			| "decimals"
			| "exchangeMintingStartsAfter"
			| "getOwner"
			| "mint"
			| "mintToDao"
			| "mintToExchange"
			| "mintingStartsAfter"
			| "name"
			| "setDaoAddress"
			| "setExchangeAddress"
			| "symbol"
			| "totalSupply"
			| "transfer"
			| "transferFrom"
	): FunctionFragment;

	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;

	encodeFunctionData(
		functionFragment: "allowance",
		values: [AddressLike, AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "approve",
		values: [AddressLike, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "balanceOf",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "daoMintingStartsAfter",
		values?: undefined
	): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "exchangeMintingStartsAfter",
		values?: undefined
	): string;
	encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
	encodeFunctionData(functionFragment: "mint", values?: undefined): string;
	encodeFunctionData(functionFragment: "mintToDao", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "mintToExchange",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "mintingStartsAfter",
		values?: undefined
	): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "setDaoAddress",
		values: [AddressLike]
	): string;
	encodeFunctionData(
		functionFragment: "setExchangeAddress",
		values: [AddressLike]
	): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "totalSupply",
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: "transfer",
		values: [AddressLike, BigNumberish]
	): string;
	encodeFunctionData(
		functionFragment: "transferFrom",
		values: [AddressLike, AddressLike, BigNumberish]
	): string;

	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "daoMintingStartsAfter",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "exchangeMintingStartsAfter",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mintToDao", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "mintToExchange",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "mintingStartsAfter",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "setDaoAddress",
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: "setExchangeAddress",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "totalSupply",
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "transferFrom",
		data: BytesLike
	): Result;
}

export namespace ApprovalEvent {
	export type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	export type OutputTuple = [owner: string, spender: string, value: bigint];
	export interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
	export type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	export type OutputTuple = [from: string, to: string, value: bigint];
	export interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export interface DexhuneERC20 extends BaseContract {
	connect(runner?: ContractRunner | null): DexhuneERC20;
	waitForDeployment(): Promise<this>;

	interface: DexhuneERC20Interface;

	queryFilter<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;

	on<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	on<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	once<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		listener: TypedListener<TCEvent>
	): Promise<this>;
	once<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		listener: TypedListener<TCEvent>
	): Promise<this>;

	listeners<TCEvent extends TypedContractEvent>(
		event: TCEvent
	): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(
		event?: TCEvent
	): Promise<this>;

	allowance: TypedContractMethod<
		[_owner: AddressLike, _spender: AddressLike],
		[bigint],
		"view"
	>;

	approve: TypedContractMethod<
		[_spender: AddressLike, _amount: BigNumberish],
		[boolean],
		"nonpayable"
	>;

	balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

	daoMintingStartsAfter: TypedContractMethod<[], [bigint], "view">;

	decimals: TypedContractMethod<[], [bigint], "view">;

	exchangeMintingStartsAfter: TypedContractMethod<[], [bigint], "view">;

	getOwner: TypedContractMethod<[], [string], "view">;

	mint: TypedContractMethod<[], [void], "nonpayable">;

	mintToDao: TypedContractMethod<[], [void], "nonpayable">;

	mintToExchange: TypedContractMethod<[], [void], "nonpayable">;

	mintingStartsAfter: TypedContractMethod<[], [bigint], "view">;

	name: TypedContractMethod<[], [string], "view">;

	setDaoAddress: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

	setExchangeAddress: TypedContractMethod<
		[addr: AddressLike],
		[void],
		"nonpayable"
	>;

	symbol: TypedContractMethod<[], [string], "view">;

	totalSupply: TypedContractMethod<[], [bigint], "view">;

	transfer: TypedContractMethod<
		[_to: AddressLike, _value: BigNumberish],
		[boolean],
		"nonpayable"
	>;

	transferFrom: TypedContractMethod<
		[from: AddressLike, to: AddressLike, value: BigNumberish],
		[boolean],
		"nonpayable"
	>;

	getFunction<T extends ContractMethod = ContractMethod>(
		key: string | FunctionFragment
	): T;

	getFunction(
		nameOrSignature: "allowance"
	): TypedContractMethod<
		[_owner: AddressLike, _spender: AddressLike],
		[bigint],
		"view"
	>;
	getFunction(
		nameOrSignature: "approve"
	): TypedContractMethod<
		[_spender: AddressLike, _amount: BigNumberish],
		[boolean],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "balanceOf"
	): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
	getFunction(
		nameOrSignature: "daoMintingStartsAfter"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "decimals"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "exchangeMintingStartsAfter"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "getOwner"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "mint"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "mintToDao"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "mintToExchange"
	): TypedContractMethod<[], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "mintingStartsAfter"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "name"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "setDaoAddress"
	): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "setExchangeAddress"
	): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
	getFunction(
		nameOrSignature: "symbol"
	): TypedContractMethod<[], [string], "view">;
	getFunction(
		nameOrSignature: "totalSupply"
	): TypedContractMethod<[], [bigint], "view">;
	getFunction(
		nameOrSignature: "transfer"
	): TypedContractMethod<
		[_to: AddressLike, _value: BigNumberish],
		[boolean],
		"nonpayable"
	>;
	getFunction(
		nameOrSignature: "transferFrom"
	): TypedContractMethod<
		[from: AddressLike, to: AddressLike, value: BigNumberish],
		[boolean],
		"nonpayable"
	>;

	getEvent(
		key: "Approval"
	): TypedContractEvent<
		ApprovalEvent.InputTuple,
		ApprovalEvent.OutputTuple,
		ApprovalEvent.OutputObject
	>;
	getEvent(
		key: "Transfer"
	): TypedContractEvent<
		TransferEvent.InputTuple,
		TransferEvent.OutputTuple,
		TransferEvent.OutputObject
	>;

	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<
			ApprovalEvent.InputTuple,
			ApprovalEvent.OutputTuple,
			ApprovalEvent.OutputObject
		>;
		Approval: TypedContractEvent<
			ApprovalEvent.InputTuple,
			ApprovalEvent.OutputTuple,
			ApprovalEvent.OutputObject
		>;

		"Transfer(address,address,uint256)": TypedContractEvent<
			TransferEvent.InputTuple,
			TransferEvent.OutputTuple,
			TransferEvent.OutputObject
		>;
		Transfer: TypedContractEvent<
			TransferEvent.InputTuple,
			TransferEvent.OutputTuple,
			TransferEvent.OutputObject
		>;
	};
}
